#pragma kernel CSMainFloat
#pragma kernel CSMainDouble

RWTexture2D<float4> Result;
Texture2D<float4> ColorTexture;
SamplerState samplerColorTexture;

struct dataFloat
{
    float width, height, realStart, imaginaryStart;
    int screenWidth, screenHeight;
    float time;
};

struct dataDouble
{
    double width, height, realStart, imaginaryStart;
    int screenWidth, screenHeight;
    double time;
};

StructuredBuffer<dataFloat> bufferFloat;
StructuredBuffer<dataDouble> bufferDouble;
uint maxIteration;

[numthreads(16,16,1)]
void CSMainFloat(uint3 id : SV_DispatchThreadID)
{
    float real, imag;
    float real2, imag2;
    float xOffset = (float)id.x / bufferFloat[0].screenWidth * bufferFloat[0].width;
    float yOffset = (float)id.y / bufferFloat[0].screenHeight * bufferFloat[0].height;

    uint iterationCount = 0;
    float4 color = {0.0f, 0.0f, 0.0f, 1.0f};

    real = bufferFloat[0].realStart + xOffset;
    imag = bufferFloat[0].imaginaryStart + yOffset;

    for (uint i=0; i<maxIteration; i++)
    {
        real2 = real * real;
        imag2 = imag * imag;

        if (real2 + imag2 > 4)
        {
            break;
        }
        
        imag = 2.0 * real * imag + bufferFloat[0].imaginaryStart + yOffset;
        real = real2 - imag2 + bufferFloat[0].realStart + xOffset;
        iterationCount++;
    }

    if (iterationCount != maxIteration)
    {
        float2 pos = float2((iterationCount / (float)maxIteration) * (maxIteration*0.01) + bufferFloat[0].time, 0);
        color = ColorTexture.SampleLevel(samplerColorTexture, pos, 0); 
    }

    Result[id.xy] = color;
}

[numthreads(16, 16, 1)]
void CSMainDouble(uint3 id : SV_DispatchThreadID)
{
    double real, imag;
    double real2, imag2;
    double xOffset = (double)id.x / bufferDouble[0].screenWidth * bufferDouble[0].width;
    double yOffset = (double)id.y / bufferDouble[0].screenHeight * bufferDouble[0].height;

    uint iterationCount = 0;
    float4 color = { 0.0f, 0.0f, 0.0f, 1.0f };

    real = bufferDouble[0].realStart + xOffset;
    imag = bufferDouble[0].imaginaryStart + yOffset;

    for (uint i = 0; i < maxIteration; i++)
    {
        real2 = real * real;
        imag2 = imag * imag;

        if (real2 + imag2 > 4)
        {
            break;
        }

        imag = 2.0 * real * imag + bufferDouble[0].imaginaryStart + yOffset;
        real = real2 - imag2 + bufferDouble[0].realStart + xOffset;
        iterationCount++;
    }

    if (iterationCount != maxIteration)
    {
        float2 pos = float2((iterationCount / (float)maxIteration) * (maxIteration * 0.01) + bufferDouble[0].time, 0);
        color = ColorTexture.SampleLevel(samplerColorTexture, pos, 0);
    }

    Result[id.xy] = color;
}

